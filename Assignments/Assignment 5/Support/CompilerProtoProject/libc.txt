;
; library functions
; 
; equivalent of libc in Linux
;
; just readint and printint
;
; readint - invokes system function readline, reading into buffer
; unpacks contents as integer - or 0 if cannot understand
;
; printint - creates decimal string in buffer, then calls system function
; writeline
;
printint: clr numsign
   tst r0
   bge wpos
   inc numsign
   neg r0
wpos: mov #obuf,r2
   mov #10,r1
wclr:   movb #40,(r2)+
   sob r1,wclr
wlp: mov r0,r1
   clr r0
   div #12,r0
   add #60,r1
   movb r1,-(r2)
   tst r0
   bgt wlp
   tst numsign
   beq wdone
   movb #55,-(r2)
wdone: writeline
   obuf
   return
readint:  readline
  inbuf
  writeline
  inbuf
  clr ival
  clr numsign
  mov #inbuf,r0
  cmpb (r0),#55 ; checking for negative sign
  bne rilp
; -ve number
  inc numsign
  inc r0
rilp:   movb (r0)+,r1
; is it a digit
;
  cmp r1,#60
  blt rdone
  cmp r1,#71
  bgt rdone
  sub #60,r1
  mov ival,r3
  mul #12,r3
  add r1,r3
  mov r3,ival
  br rilp
rdone:  mov ival,r0
  tst numsign
  beq unsigned
  neg r0
unsigned:
  return
ival: 0
numsign: 0
inbuf: .blkw 10
obuf: .blkw 10
newline:writeline
  newl
  return
newl: .word 15
; readoct and printoct added later
readoct:  readline
  inbuf
  writeline
  inbuf
  clr ival2
  mov #inbuf,r0
rilp2:   movb (r0)+,r1
; is it an octal digit
  cmp r1,#60
  blt rdone2
  cmp r1,#67
  bgt rdone2
  sub #60,r1
  mov ival2,r3
  ash #3,r3
  add r1,r3
  mov r3,ival2
  br rilp2
rdone2:  mov ival2,r0
  return
ival2: 0
; print number as unsigned octal bit pattern
; start by clearing output buffer
printoct:mov #obuf2,r2
   mov #10,r1
wclr2:   movb #40,(r2)+
   sob r1,wclr2
   mov #5,r3
wlp2:mov r0,r1
   bic mask,r1
   add #60,r1
   movb r1,-(r2)
   asr r0
   asr r0
   asr r0
   sob r3,wlp2
   bic mask2,r0
   add #60,r0
   movb r0,-(r2)
   writeline
   obuf2
   return
mask:177770
mask2:17776
obuf2:.blkw 10
;----------------------------
